Write me a “go” back end service.
The back end service will have those below :


Some crypto symbols will be given in a yaml config file to listen to.
Back end will start listening to the WebSocket stream from that binance page.
https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams

We need to subscribe to <symbol>@trade stream only. For now you can ignore other event types.

The backend will generate OHLC (Open, High, Low, Close) from the incoming prices. While doing this, it will save the OHLC data it produces in different periods like 10 seconds, 30 seconds, 1 minute, 2 minutes, 5 minutes, and 10 minutes into SQLite. It will respond with list of candle sticks created from the trades in the last hour only, from to requests the interface for a specific symbol and period. Be careful about the time zone differences coming from the stream. You need to pick the last hour done with the latest trade in database.For now only write the back end service. 
Do not write any tests. I will give extra instructions to mock the stream with wire mock or  a test container later.

————————————————

Write some test code to test the whole app from outside with http calls.. I dont want any unit test.
Only e2e tests

move tests and its sh file to a more proper place other than root

———————————————

Write me a React JS UI now for the  “go” back end service above  in “ui” folder.Keep all ui and backend service space completely separate.  UI will be a js/react project. Back end is already in “go”. When you are generating UI code take “ui” folder as base

UI : 
The UI will be with React JS using ES8 javascript version or any latest stable one.
Do not use type script. Use latest stable ES version.

On UI, the landing page there will be some buttons or menus to open  live trades page which is detailed below. All the pages listed below will be a new page in a new window. I should be able to close the whole page and reopen another one from the landing page. 

First page will be Live Trades page and  we should be able to see realtime trades.

On the table on UI, there need to be those columns :  symbol, price,  quantity, time

The table will be fed with  realtime trades for all symbols through web socket connection on UI.

The connected backend will be sending those data through web socket connection.


The second page, will be  Price Charts page.

There will be a candlestick chart component for prices on that page. After the page is opened, it will fetch data from the backend for the selected symbol,  date range and specified period ( 10s, 30s, 1m, 2m, 5m, 10m) and generate the chart.